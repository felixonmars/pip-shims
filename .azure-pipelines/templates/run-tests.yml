parameters:
  pythonVersions: []
  pipVersions: []
  vmImage: ''
  jobName: ''

jobs:
- job: ${{ parameters.jobName }}
  pool:
    vmImage: ${{ parameters.vmImage }}
  strategy:
    matrix:
      ${{ each py in parameters.pythonVersions }}:
        ${{ each pip in parameters.pipVersions }}:
          ${{ if contains(pip, 'github.com') }}:
            ${{ format('{0}-PIPMaster', py) }}:
              python.version: ${{ py }}
              INSTALL_PIP_VERSION: ${{ pip }}
          ${{ if not(contains(pip, 'github.com')) }}:
            ${{ format('{0}{1}', py, pip) }}:
              python.version: ${{ py }}
              INSTALL_PIP_VERSION: ${{ pip }}
  variables:
  - group: CI
  steps:
#   - ${{ if eq(parameters.vmImage, 'ubuntu-latest') }}:
#     - template: ./reinstall-pythons.yml

  - task: UsePythonVersion@0
    inputs:
      versionSpec: $(python.version)
    displayName: Use Python $(python.version)

  - script: |
      python -m pip install pipenv
      python -m pipenv run python -m pip install $(INSTALL_PIP_VERSION) --upgrade
      pipenv install --dev
    displayName: 'Install Dependencies'
    env:
      PYTHONWARNINGS: ignore:DEPRECATION
  - script: pipenv run pytest -ra --junitxml=junit/test-results.xml tests/
    displayName: 'Run PyTest'
    env:
      PYTHONWARNINGS: ignore:DEPRECATION

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testRunTitle: '$(Agent.OS) - $(Build.DefinitionName) - Python $(python.version)'
    condition: succeededOrFailed()
    displayName: 'Publish Test Results'
