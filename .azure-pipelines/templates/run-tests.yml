parameters:
  pythonVersions: []
  pipVersions: []
  vmImage: ''
  jobName: ''

jobs:
- job: ${{ parameters.jobName }}
  pool:
    vmImage: ${{ parameters.vmImage }}
  strategy:
    matrix:
      ${{ each py in parameters.pythonVersions }}:
        ${{ each pip in parameters.pipVersions }}:
          ${{ if contains(pip, 'github.com') }}:
            ${{ format('{0}-PIPMaster', py) }}:
              python.version: ${{ py }}
              PIP_VERSION: ${{ pip }}
          ${{ if not(contains(pip, 'github.com')) }}:
            ${{ format('{0}{1}', py, pip) }}:
              python.version: ${{ py }}
              PIP_VERSION: ${{ pip }}
  variables:
  - group: CI
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: $(python.version)
    displayName: Use Python $(python.version)

  - ${{ if eq(parameters.vmImage, 'windows-2019') }}:
    - powershell: |
        python -m pip install virtualenv --upgrade
        python -m virtualenv .venv
        . .venv/Scripts/activate.ps1
        python -m pip install $(PIP_VERSION)
        python -m pip install setuptools wheel pytest-xdist pytest-cov pytest-timeout --upgrade
        python -m pip install -e .[tests]
      displayName: Install Dependencies
    - powershell: |
        . .venv/Scripts/activate.ps1
        pytest -ra --junitxml=junit/test-results.xml tests/
      displayName: 'Run Pytest'

  - ${{ if ne(parameters.vmImage, 'windows-2019') }}:
    - script: |
        python -m pip install virtualenv --upgrade
        python -m virtualenv .venv
        . .venv/bin/activate && \
            python -m pip install $(PIP_VERSION) &&
            python -m pip install setuptools wheel pytest-xdist pytest-cov pytest-timeout --upgrade && \
            python -m pip install -e .[tests]
      displayName: Install Dependencies
    - script: |
        . .venv/bin/activate && \
            pytest -ra --junitxml=junit/test-results.xml tests/
      displayName: 'Run Pytest'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testRunTitle: '$(Agent.OS) - $(Build.DefinitionName) - Python $(python.version)'
    condition: succeededOrFailed()
    displayName: 'Publish Test Results'
